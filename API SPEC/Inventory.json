GET Inventory API

Http Method: GET
"/inventory"

(DEFAULT, harus ada di setiap API, untuk support tipe data JSON)
Request Header:
	- content-type	: application/json
	- Accept 		: application/json

//CONTOH balikan response get inventory adalah data inventory jika berhasil dan error NotFound Jika Gagal

Response Sukses
{
	"code" : "OK",
	"status" : 200,
	"content" : [
		{
			"id"		: 1,
			"nama" 		: "Keyboard",	
			"harga"		: 1000000,
			"jumlah"	: 1,
			"deskripsi"	: "Alat kantor untuk mengetik"
		},
		{
			"id"		: 2,
			"nama" 		: "Printer",	
			"harga"		: 2000000,
			"jumlah"	: 1,
			"deskripsi"	: "Alat kantor untuk mencetak"
		}
	]
}

Response Failed
{
	"code" : "NotFound",
	"status" : 404,
	"content" : null
}


GET ONE Inventory API

Http Method: GET
"/inventory/{inventoryId}"

(DEFAULT, harus ada di setiap API, untuk support tipe data JSON)
Request Header:
	- content-type	: application/json
	- Accept 		: application/json

Path Variable:
inventoryId

//CONTOH balikan response get inventory dengan id 1 adalah data supervisor jika berhasil dan error NotFound Jika Gagal
Response Sukses
{
	"code" : "OK",
	"status" : 200,
	"content" : [
		{
			"id"		: 1,
			"nama" 		: "Keyboard",	
			"harga"		: 1000000,
			"jumlah"	: 1,
			"deskripsi"	: "Alat kantor untuk mengetik"
		}
	]
}
Response Failed
{
	"code" : "Not Found",
	"status" : 404,
	"message" : "Inventory not found with Id 1"
}


CREATE Inventory API

Http Method: POST
"/inventory"

(DEFAULT, harus ada di setiap API, untuk support tipe data JSON)
Request Header:
	- Content-type	: application/json
	- Accept 		: application/json


//CONTOH request inventory yang akan disimpan
Request Body:
{
	"nama" 		: "Keyboard",	
	"harga"		: 1000000,
	"jumlah"	: 1,
	"deskripsi"	: "Alat kantor untuk mengetik"
}


//CONTOH balikan response create inventory misal nya adalah true jika berhasil dan false jika gagal
Response Sukses
{
	"code" : "OK",
	"status" : 200,
	"content : true
}

Response Failed
{
	"code" : "OK",
	"status" : 200,
	"content" : false
}


UPDATE Inventory API

Http Method: Put
"/inventory/{inventoryId}"

(DEFAULT, harus ada di setiap API, untuk support tipe data JSON)
Request Header:
	- Content-type	: application/json
	- Accept 		: application/json
	
Path Variable:
inventoryId

//CONTOH update inventory dengan id = 1 yang sebelumnya berisi nama keyboard
Path Variable:
"/inventory/1"
Request Body:
{
	"nama" 		: "Keyboard",	
	"harga"		: 1000000,
	"jumlah"	: 1,
	"deskripsi"	: "Alat kantor untuk mengetik dan olahraga jari"
}


//CONTOH balikan yang akan terjadi jika berhasil atau throw exception jika error
Response Sukses
{
	"code" : "OK",
	"status" : 200,
	"content" : true
}

Response Failed
{
	"code" : "Not Found",
	"status" : 404,
	"message" : "Inventory not found with Id 1"
}


DELETE Inventory API

Http Method: Delete
"/inventory/{inventoryId}"

(DEFAULT, harus ada di setiap API, untuk support tipe data JSON)
Request Header:
	- Content-type	: application/json
	- Accept 		: application/json
	
Path Variable:
inventoryId

//CONTOH response delete inventory dengan id = 1
Path Variable:
"/inventory/1"
Response Sukses
{
	"code" : "OK",
	"status" : 200,
	"content" : true
}
Response Failed
{
	"code" : "Not Found",
	"status" : 404,
	"message" : "Inventory not found with Id 1"
}